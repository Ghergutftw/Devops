pipeline {
    agent any
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
        skipDefaultCheckout()
    }

    tools {
        maven 'MAVEN3.9.10'
        jdk 'JDK17'
    }

    environment {
        // AWS Configuration
        AWS_REGION = 'us-east-1'
        AWS_ACCOUNT_ID = '202630627892'
        
        // ECR Configuration
        ECR_REGISTRY = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        IMAGE_REPO = 'vprofile'
        IMAGE_NAME = "${ECR_REGISTRY}/${IMAGE_REPO}"
        
        // ECS Configuration
        ECS_CLUSTER = credentials('vprofile')
        ECS_SERVICE = credentials('vprofileappsvc')
        
        // Build Configuration
        MAVEN_OPTS = '-Xmx1024m -XX:MaxPermSize=256m'
        
        // Security
        DOCKER_BUILDKIT = '1'
        BUILDKIT_INLINE_CACHE = '1'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/docker']],
                    userRemoteConfigs: [[
                        url: 'https://github.com/hkhcoder/vprofile-project.git',
                        credentialsId: 'github-credentials'
                    ]],
                    extensions: [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'CloneOption', depth: 1, shallow: true]
                    ]
                ])
            }
        }

        stage('Build & Test') {
            parallel {
                stage('Maven Build') {
                    steps {
                        script {
                            echo "Building project with Maven..."
                            sh '''
                                mvn clean compile -B -V \
                                    -Dmaven.test.skip=true \
                                    -Dmaven.compile.fork=true \
                                    -Dfile.encoding=UTF-8
                            '''
                        }
                    }
                }
                
                stage('Security Scan - Dependencies') {
                    steps {
                        script {
                            echo "Scanning dependencies for vulnerabilities..."
                            sh '''
                                mvn dependency-check:check \
                                    -Dformat=XML \
                                    -DfailBuildOnCVSS=7 \
                                    -DsuppressNvdApiKey=true
                            '''
                        }
                    }
                    post {
                        always {
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'target',
                                reportFiles: 'dependency-check-report.html',
                                reportName: 'Dependency Check Report'
                            ])
                        }
                    }
                }
            }
        }

        stage('Package') {
            steps {
                script {
                    echo "Creating application package..."
                    sh 'mvn package -DskipTests -B'
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: '**/target/*.war', allowEmptyArchive: true
                }
            }
        }

        stage('Quality Assurance') {
            parallel {
                stage('Unit Tests') {
                    steps {
                        script {
                            echo "Running unit tests..."
                            sh 'mvn test -B -Dtest.failure.ignore=true'
                        }
                    }
                    post {
                        always {
                            junit testResults: '**/target/surefire-reports/*.xml', allowEmptyResults: true
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'target/site/jacoco',
                                reportFiles: 'index.html',
                                reportName: 'Code Coverage Report'
                            ])
                        }
                    }
                }

                stage('Code Quality') {
                    steps {
                        script {
                            echo "Running code quality analysis..."
                            sh 'mvn checkstyle:checkstyle spotbugs:spotbugs pmd:pmd'
                        }
                    }
                    post {
                        always {
                            recordIssues(
                                enabledForFailure: true,
                                tools: [
                                    checkStyle(),
                                    spotBugs(),
                                    pmdParser()
                                ]
                            )
                        }
                    }
                }

                stage('SonarQube Analysis') {
                    when {
                        anyOf {
                            branch 'main'
                            branch 'develop'
                            changeRequest()
                        }
                    }
                    environment {
                        scannerHome = tool 'SonarQubeScanner'
                    }
                    steps {
                        withSonarQubeEnv('sonar_qube_server') {
                            sh '''
                                ${scannerHome}/bin/sonar-scanner \
                                -Dsonar.projectKey=vprofile \
                                -Dsonar.projectName=vprofile-repo \
                                -Dsonar.projectVersion=${BUILD_NUMBER} \
                                -Dsonar.sources=src/main/java \
                                -Dsonar.tests=src/test/java \
                                -Dsonar.java.binaries=target/classes \
                                -Dsonar.java.test.binaries=target/test-classes \
                                -Dsonar.junit.reportPaths=target/surefire-reports \
                                -Dsonar.jacoco.reportPaths=target/jacoco.exec \
                                -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
                                -Dsonar.java.spotbugs.reportPaths=target/spotbugsXml.xml \
                                -Dsonar.java.pmd.reportPaths=target/pmd.xml
                            '''
                        }
                    }
                }

                stage('SonarQube Quality Gate') {
                    when {
                        anyOf {
                            branch 'main'
                            branch 'develop'
                        }
                    }
                    steps {
                        timeout(time: 5, unit: 'MINUTES') {
                            waitForQualityGate abortPipeline: true
                        }
                    }
                }
            }
        }

        stage('Container Security & Build') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                    changeRequest target: 'main'
                }
            }
            steps {
                script {
                    echo "Building and scanning container image..."
                    
                    // Build with BuildKit for better caching and security
                    sh '''
                        docker buildx create --use --name mybuilder || true
                        docker buildx build \
                            --platform linux/amd64 \
                            --cache-from type=registry,ref=${IMAGE_NAME}:cache \
                            --cache-to type=registry,ref=${IMAGE_NAME}:cache,mode=max \
                            --tag ${IMAGE_NAME}:${BUILD_NUMBER} \
                            --tag ${IMAGE_NAME}:latest \
                            --load \
                            ./Docker-files/app/multistage/
                    '''
                    
                    // Container security scanning with Trivy
                    sh '''
                        # Install Trivy if not present
                        if ! command -v trivy &> /dev/null; then
                            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
                        fi
                        
                        # Scan for vulnerabilities
                        trivy image --format json --output trivy-report.json ${IMAGE_NAME}:${BUILD_NUMBER}
                        trivy image --format table ${IMAGE_NAME}:${BUILD_NUMBER}
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'trivy-report.json', allowEmptyArchive: true
                }
            }
        }

        stage('Push to ECR') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                script {
                    echo "Pushing image to ECR..."
                    withAWS(credentials: 'awscreds', region: env.AWS_REGION) {
                        sh '''
                            # Login to ECR
                            aws ecr get-login-password --region ${AWS_REGION} | \
                                docker login --username AWS --password-stdin ${ECR_REGISTRY}
                            
                            # Push images
                            docker push ${IMAGE_NAME}:${BUILD_NUMBER}
                            docker push ${IMAGE_NAME}:latest
                            
                            # Create image manifest for security scanning
                            docker manifest inspect ${IMAGE_NAME}:${BUILD_NUMBER} > image-manifest.json
                        '''
                    }
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'image-manifest.json', allowEmptyArchive: true
                }
            }
        }

        stage('Deploy to ECS') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo "Deploying to ECS..."
                    withAWS(credentials: 'awscreds', region: env.AWS_REGION) {
                        sh '''
                            # Update ECS service with new image
                            aws ecs update-service \
                                --cluster ${ECS_CLUSTER} \
                                --service ${ECS_SERVICE} \
                                --force-new-deployment \
                                --region ${AWS_REGION}
                            
                            # Wait for deployment to complete
                            aws ecs wait services-stable \
                                --cluster ${ECS_CLUSTER} \
                                --services ${ECS_SERVICE} \
                                --region ${AWS_REGION}
                        '''
                    }
                }
            }
        }

        stage('Post-Deploy Verification') {
            when {
                branch 'main'
            }
            steps {
                script {
                    echo "Verifying deployment..."
                    withAWS(credentials: 'awscreds', region: env.AWS_REGION) {
                        sh '''
                            # Check service status
                            aws ecs describe-services \
                                --cluster ${ECS_CLUSTER} \
                                --services ${ECS_SERVICE} \
                                --query 'services[0].deployments[?status==`PRIMARY`].{Status:status,RunningCount:runningCount,DesiredCount:desiredCount}' \
                                --output table
                            
                            # Get service endpoint for health check
                            SERVICE_ARN=$(aws ecs describe-services \
                                --cluster ${ECS_CLUSTER} \
                                --services ${ECS_SERVICE} \
                                --query 'services[0].serviceArn' \
                                --output text)
                            
                            echo "Service ARN: $SERVICE_ARN"
                            echo "Deployment verification completed"
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Pipeline completed"
            cleanWs()
        }
        
        success {
            echo "Pipeline succeeded! 🎉"
            // Send success notification
            emailext (
                subject: "✅ Pipeline Success: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                body: """
                    Pipeline executed successfully!
                    
                    Job: ${env.JOB_NAME}
                    Build: ${env.BUILD_NUMBER}
                    Duration: ${currentBuild.durationString}
                    
                    View details: ${env.BUILD_URL}
                """,
                to: "${env.CHANGE_AUTHOR_EMAIL ?: 'team@company.com'}"
            )
        }
        
        failure {
            echo "Pipeline failed! ❌"
            // Send failure notification
            emailext (
                subject: "❌ Pipeline Failed: ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                body: """
                    Pipeline execution failed!
                    
                    Job: ${env.JOB_NAME}
                    Build: ${env.BUILD_NUMBER}
                    Duration: ${currentBuild.durationString}
                    
                    View details: ${env.BUILD_URL}
                    Console Output: ${env.BUILD_URL}console
                """,
                to: "${env.CHANGE_AUTHOR_EMAIL ?: 'team@company.com'}"
            )
        }
        
        unstable {
            echo "Pipeline is unstable! ⚠️"
        }
        
        cleanup {
            script {
                // Clean up local Docker images
                sh '''
                    docker system prune -f --volumes || true
                    docker builder prune -f || true
                '''
            }
        }
    }
}