pipeline {
    agent any

    tools {
        maven 'MAVEN3.9.10'
        jdk 'JDK17'
    }

    environment {
        // Service:REGION:CredentialID
        registryCredential = 'ecr:us-east-1:awscreds'
        imageName = '202630627892.dkr.ecr.us-east-1.amazonaws.com/vprofile'
        vprofileRegistry = 'https://202630627892.dkr.ecr.us-east-1.amazonaws.com'
        cluster = "vprofile"
        service = "vprofileappsvc"
    }

    stages {

        stage('Fetch code') {
            steps {
                git branch: 'docker', url: 'https://github.com/hkhcoder/vprofile-project.git'
            }
        }

        stage('Build') {
            steps {
                echo "Building project (skip tests)..."
                sh 'mvn install -DskipTests'
            }
            post {
                success {
                    echo "Archiving artifacts..."
                    // archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }

        stage('Unit Test') {
            steps {
                echo "Running unit tests..."
                sh 'mvn test'
            }
        }

        stage('Checkstyle Analysis') {
            steps {
                echo "Running Checkstyle analysis..."
                sh 'mvn checkstyle:checkstyle'
            }
        }

        stage('SonarQube analysis - Uploading results') {
            environment {
                scannerHome = tool 'SonarQubeScanner'
            }
            steps {
                withSonarQubeEnv('sonar_qube_server') {
                    sh '''
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=vprofile \
                        -Dsonar.projectName=vprofile-repo \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=src/ \
                        -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                        -Dsonar.junit.reportsPath=target/surefire-reports/ \
                        -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                    '''
                }
            }
        }

        // Uncomment if you want to enable the Quality Gate check
        // stage('SonarQube Quality Gate') {
        //     steps {
        //         timeout(time: 2, unit: 'MINUTES') {
        //             waitForQualityGate abortPipeline: true
        //         }
        //     }
        // }

        stage('Build App Image') {
            steps {
                script {
                    dockerImage = docker.build("${imageName}:${BUILD_NUMBER}", "./Docker-files/app/multistage/")
                }
            }
        }

        stage('Upload App Image') {
            steps {
                script {
                    docker.withRegistry(vprofileRegistry, registryCredential) {
                        dockerImage.push("$BUILD_NUMBER")
                        dockerImage.push('latest')
                    }
                }
            }
        }
        stage('Remove Container Image') {
            steps {
                sh 'docker rmi -f $(docker images -a -q)'
            }
        }
        stage('Deploy to ECS') {
            steps {
                withAWS(credentials: 'awscreds', region: 'us-east-1') {
                    sh "aws ecs update-service --cluster ${cluster} --service ${service} --force-new-deployment"
                }
            }
}

    }
}
