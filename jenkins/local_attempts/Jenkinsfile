pipeline {
    agent any
    tools {
        maven 'MAVEN3.9.10'
        jdk 'JDK17'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Fetch Code') {
            steps {
                echo "Fetching code from GitHub..."
                git branch: 'atom', url: 'https://github.com/hkhcoder/vprofile-project.git'
            }
        }
        stage('Build') {
            steps {
                echo "Building project (skip tests)..."
                sh 'mvn install -DskipTests'
            }
            post {
                success {
                    echo "Archiving artifacts..."
                   // archiveArtifacts artifacts: '**/target/*.war'
                }
            }
        }
        stage('Unit Test') {
            steps {
                echo "Running unit tests..."
                sh 'mvn test'
            }
        }
        stage('Checkstyle Analysis') {
            steps {
                echo "Running Checkstyle analysis..."
                sh 'mvn checkstyle:checkstyle'
            }
        }
        stage('SonarQube analysis - Uploading results') {
            // Try to diff the environment variable name
            environment {
                scannerHome = tool 'SONAR_HOME'
            }
            steps {
                withSonarQubeEnv('SONAR_HOME') {
                    sh '''
                        ${scannerHome}/bin/sonar-scanner \
                        -Dsonar.projectKey=vprofile \
                        -Dsonar.projectName=vprofile \
                        -Dsonar.projectVersion=1.0 \
                        -Dsonar.sources=src/ \
                        -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                        -Dsonar.junit.reportsPath=target/surefire-reports/ \
                        -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                        -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
                    '''
                }
            }
        }
        stage('SonarQube Quality Gate') {
            steps {
                timeout(time: 15, unit: 'SECONDS') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        stage('Deploy to Nexus') {
            steps {
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    def dynamicVersion = "${pom.version}-${env.BUILD_ID}-${env.BUILD_TIMESTAMP}"
                    def artifactFile = "target/${pom.artifactId}-${pom.version}.war" // update if needed

                    nexusArtifactUploader(
                        nexusVersion: 'nexus3',
                        protocol: 'http',
                        nexusUrl: '192.168.56.11:8081',
                        groupId: pom.groupId,
                        version: dynamicVersion,
                        repository: 'vprofile',
                        credentialsId: 'NEXUS_CREDENTIALS',
                        artifacts: [
                            [
                                artifactId: pom.artifactId,
                                classifier: '',
                                file: 'target/vprofile-v2.war',
                                type: 'war'
                            ]
                        ]
                    )
                }
            }
        }
    }
}